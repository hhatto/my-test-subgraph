// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class IncubatorAuthenticate extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save IncubatorAuthenticate entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save IncubatorAuthenticate entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("IncubatorAuthenticate", id.toString(), this);
  }

  static load(id: string): IncubatorAuthenticate | null {
    return store.get(
      "IncubatorAuthenticate",
      id
    ) as IncubatorAuthenticate | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get market(): Bytes {
    let value = this.get("market");
    return value.toBytes();
  }

  set market(value: Bytes) {
    this.set("market", Value.fromBytes(value));
  }

  get property(): Bytes {
    let value = this.get("property");
    return value.toBytes();
  }

  set property(value: Bytes) {
    this.set("property", Value.fromBytes(value));
  }

  get githubRepository(): string | null {
    let value = this.get("githubRepository");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set githubRepository(value: string | null) {
    if (value === null) {
      this.unset("githubRepository");
    } else {
      this.set("githubRepository", Value.fromString(value as string));
    }
  }
}

export class IncubatorFinish extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save IncubatorFinish entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save IncubatorFinish entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("IncubatorFinish", id.toString(), this);
  }

  static load(id: string): IncubatorFinish | null {
    return store.get("IncubatorFinish", id) as IncubatorFinish | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get account(): Bytes {
    let value = this.get("account");
    return value.toBytes();
  }

  set account(value: Bytes) {
    this.set("account", Value.fromBytes(value));
  }

  get githubRepository(): string | null {
    let value = this.get("githubRepository");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set githubRepository(value: string | null) {
    if (value === null) {
      this.unset("githubRepository");
    } else {
      this.set("githubRepository", Value.fromString(value as string));
    }
  }

  get Status(): i32 {
    let value = this.get("Status");
    return value.toI32();
  }

  set Status(value: i32) {
    this.set("Status", Value.fromI32(value));
  }

  get Reward(): BigInt | null {
    let value = this.get("Reward");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set Reward(value: BigInt | null) {
    if (value === null) {
      this.unset("Reward");
    } else {
      this.set("Reward", Value.fromBigInt(value as BigInt));
    }
  }
}

export class IncubatorTwitter extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save IncubatorTwitter entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save IncubatorTwitter entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("IncubatorTwitter", id.toString(), this);
  }

  static load(id: string): IncubatorTwitter | null {
    return store.get("IncubatorTwitter", id) as IncubatorTwitter | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get TwitterId(): string | null {
    let value = this.get("TwitterId");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set TwitterId(value: string | null) {
    if (value === null) {
      this.unset("TwitterId");
    } else {
      this.set("TwitterId", Value.fromString(value as string));
    }
  }

  get githubRepository(): string | null {
    let value = this.get("githubRepository");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set githubRepository(value: string | null) {
    if (value === null) {
      this.unset("githubRepository");
    } else {
      this.set("githubRepository", Value.fromString(value as string));
    }
  }
}
